#!/sbin/sh
# update-binary functions by osm0sis @ xda-developers
# script and assert functions by SuperR

OUTFD=/proc/self/fd/$2;
ZIPFILE="$3";
DIR=$(dirname "$ZIPFILE");

assert_device() {
  thisname=$(getprop ro.product.name)
  thisdevice=$(getprop ro.product.device)
  thisproduct=$(getprop ro.build.product)
  devassert=$(echo "$1" | tr , '\n')
  assertp=""
  echo "$devassert" | while read line; do
    if [ "$thisdevice" == "$line" -o "$thisproduct" == "$line" -o "$thisname" == "$line" ]; then
      assertp=1
    fi
  done
  if [ $assertp != "1" ]; then
    abort "This package is for $1 devices, this is a $thisdevice $thisproduct $thisname"
  fi
}
assert_custom() {
  cusprop=$(echo "$1" | cut -d'=' -f1)
  cusvalue=$(echo "$1" | cut -d'=' -f2)
  custhis=$(getprop "$cusprop")
  if [ "$custhis" != "$cusvalue" ]; then
    abort "This package is for $cusvalue, this is $custhis"
  fi
}
ui_print() {
  while [ "$1" ]; do
    echo -e "ui_print $1
      ui_print" >> $OUTFD;
    shift;
  done;
}
show_progress() { echo "progress $1 $2" >> $OUTFD; }
set_progress() { echo "set_progress $1" >> $OUTFD; }
is_substring() {
  case "$2" in
    *$1*) echo 1;;
    *) echo 0;;
  esac;
}
unmount() { umount "$1"; }
is_mounted() { test "$(mount | grep " $1 ")" && echo 1 || echo 0; }
write_raw_image() { dd if="$1" of="$2"; }
package_extract_file() { mkdir -p "$(dirname "$2")"; unzip -o "$ZIPFILE" "$1" -p > "$2"; }
package_extract_dir() {
  local entry outfile;
  for entry in $(unzip -l "$ZIPFILE" 2>/dev/null | tail -n+4 | grep -v '/$' | grep -o " $1.*$" | cut -c2-); do
    outfile="$(echo "$entry" | sed "s|${1}|${2}|")";
    mkdir -p "$(dirname "$outfile")";
    unzip -o "$ZIPFILE" "$entry" -p > "$outfile";
  done;
}
delete_recursive() { rm -rf "$@"; }
symlink() {
  local file="$1";
  while [ "$2" ]; do
    ln -sf "$file" "$2";
    shift;
  done;
}
set_metadata() {
  local file i;
  file="$1";
  shift;
  while [ "$2" ]; do
    case $1 in
      uid) chown $2 "$file";;
      gid) chown :$2 "$file";;
      mode) chmod $2 "$file";;
      capabilities) twrp setcap "$file" $2;;
      selabel)
        for i in /system/bin/toybox /system/toolbox /system/bin/toolbox; do
          (LD_LIBRARY_PATH=/system/lib $i chcon -h $2 "$file" || LD_LIBRARY_PATH=/system/lib $i chcon $2 "$file") 2>/dev/null;
        done || chcon -h $2 "$file" || chcon $2 "$file";
      ;;
      *) ;;
    esac;
    shift 2;
  done;
}
set_metadata_recursive() {
  local dir i;
  dir="$1";
  shift;
  while [ "$2" ]; do
    case $1 in
      uid) chown -R $2 "$dir";;
      gid) chown -R :$2 "$dir";;
      dmode) find "$dir" -type d -exec chmod $2 {} +;;
      fmode) find "$dir" -type f -exec chmod $2 {} +;;
      capabilities) find "$dir" -exec twrp setcap {} $2 +;;
      selabel)
        for i in /system/bin/toybox /system/toolbox /system/bin/toolbox; do
          (find "$dir" -exec LD_LIBRARY_PATH=/system/lib $i chcon -h $2 {} + || find "$dir" -exec LD_LIBRARY_PATH=/system/lib $i chcon $2 {} +) 2>/dev/null;
        done || find "$dir" -exec chcon -h $2 '{}' + || find "$dir" -exec chcon $2 '{}' +;
      ;;
      *) ;;
    esac;
    shift 2;
  done;
}
set_perm() {
  local uid gid mod;
  uid=$1; gid=$2; mod=$3;
  shift 3;
  chown $uid:$gid "$@" || chown $uid.$gid "$@";
  chmod $mod "$@";
}
set_perm_recursive() {
  local uid gid dmod fmod;
  uid=$1; gid=$2; dmod=$3; fmod=$4;
  shift 4;
  while [ "$1" ]; do
    chown -R $uid:$gid "$1" || chown -R $uid.$gid "$1";
    find "$1" -type d -exec chmod $dmod {} +;
    find "$1" -type f -exec chmod $fmod {} +;
    shift;
  done;
}
file_getprop() { grep "^$2=" "$1" | cut -d= -f2-; }
getprop() { test -e /sbin/getprop && /sbin/getprop $1 || grep "^$1=" /default.prop | cut -d= -f2-; }
sha1_check() {
  local sum=$(sha1sum $1 | cut -c-40);
  if [ ! "$2" -o $(is_substring $sum "$*") == 1 ]; then
    echo $sum;
  fi;
}
api_level_arch_detect() {
  API=`getprop ro.build.version.sdk`
  ABI=`getprop ro.product.cpu.abi | cut -c-3`
  ABI2=`getprop ro.product.cpu.abi2 | cut -c-3`
  ABILONG=`getprop ro.product.cpu.abi`

  ARCH=""
  if [ "$ABI" = "x86" ]; then ARCH=""; fi;
  if [ "$ABI2" = "x86" ]; then ARCH=""; fi;
  if [ "$ABILONG" = "arm64-v8a" ]; then ARCH=64; fi;
  if [ "$ABILONG" = "x86_64" ]; then ARCH=64; fi;
}
abort() { ui_print "$*"; exit 1; }
api_level_arch_detect
system=$(file_getprop /tmp/config system)
vendor=$(file_getprop /tmp/config vendor)
optics=$(file_getprop /tmp/config optics)
prism=$(file_getprop /tmp/config prism)
data=$(file_getprop /tmp/config data)
boot=$(file_getprop /tmp/config boot)
version=$(file_getprop /tmp/config version)
product=$(file_getprop /tmp/config product)
cust=$(file_getprop /tmp/config cust)
oem=$(file_getprop /tmp/config oem)
odm=$(file_getprop /tmp/config odm)
recovery=$(file_getprop /tmp/config reocvery)
ramdisk=$(file_getprop /tmp/config ramdisk)
kernel=$(file_getprop /tmp/config kernel)
sysmnt=$(file_getprop /tmp/config sysmnt)
byname=$(file_getprop /tmp/config byname)
slotnum=$(file_getprop /tmp/config slotnum)
